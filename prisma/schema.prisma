generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                String            @id @default(cuid())
  role              Role
  full_name         String
  email             String            @unique
  username          String            @unique
  password_hash     String
  phone             String?
  profile_image_url String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  status            UserStatus?       @default(active)
  announcements     announcements[]   @relation("announcements_posted")
  blog_posts        blog_posts[]
  messages_received messages[]        @relation("messages_received")
  messages_sent     messages[]        @relation("messages_sent")
  notifications     notifications[]
  password_resets   password_resets[]
  student           students?
  teacher           teachers?
}

model teachers {
  id               String            @id @default(cuid())
  user_id          String            @unique
  experience_years Int?
  subjects_taught  String?
  bio              String?
  assignments      assignments[]
  homework         homework[]
  live_classes     live_classes[]
  teacher_courses  teacher_courses[] @relation("TeacherToCourses")
  user             users             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model teacher_courses {
  id         String   @id @default(cuid())
  teacher_id String
  course_id  String
  course     courses  @relation("CourseToTeachers", fields: [course_id], references: [id], onDelete: Cascade)
  teacher    teachers @relation("TeacherToCourses", fields: [teacher_id], references: [id], onDelete: Cascade)

  @@unique([teacher_id, course_id])
  @@index([course_id], map: "teacher_courses_course_id_fkey")
}

model student_courses {
  id         String   @id @default(cuid())
  student_id String
  course_id  String
  course     courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  student    students @relation("StudentToCourse", fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, course_id])
  @@index([course_id], map: "student_courses_course_id_fkey")
}

model students {
  id                  String                @id @default(cuid())
  user_id             String                @unique
  grade_level         String?
  enrollment_date     DateTime              @default(now())
  progress_score      Int                   @default(0)
  certificates        certificates[]
  student_assignments student_assignments[]
  student_courses     student_courses[]     @relation("StudentToCourse")
  user                users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model assignments {
  id          String                @id @default(cuid())
  title       String
  description String?
  file_url    String?
  teacher_id  String
  course_id   String?
  created_at  DateTime              @default(now())
  due_date    DateTime?
  course      courses?              @relation(fields: [course_id], references: [id], onDelete: Cascade)
  teacher     teachers              @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  submissions student_assignments[] @relation("AssignmentToSubmission")

  @@index([course_id], map: "assignments_course_id_fkey")
  @@index([teacher_id], map: "assignments_teacher_id_fkey")
}

model student_assignments {
  id                 String      @id @default(cuid())
  assignment_id      String
  student_id         String
  submitted_file_url String?
  description        String?
  teacher_id         String?
  grade              String?
  feedback           String?
  submitted_at       DateTime?
  assignment         assignments @relation("AssignmentToSubmission", fields: [assignment_id], references: [id], onDelete: Cascade)
  student            students    @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([assignment_id, student_id])
  @@index([student_id], map: "student_assignments_student_id_fkey")
}

model courses {
  id              String            @id @default(cuid())
  name            String
  description     String?
  created_at      DateTime          @default(now())
  assignments     assignments[]
  certificates    certificates[]
  live_classes    live_classes[]
  student_courses student_courses[]
  teacher_courses teacher_courses[] @relation("CourseToTeachers")
}

model homework {
  id         String   @id @default(cuid())
  title      String
  content    String?
  file_url   String?
  teacher_id String
  created_at DateTime @default(now())
  teacher    teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id], map: "homework_teacher_id_fkey")
}

model live_classes {
  id          String    @id @default(cuid())
  title       String
  description String?
  start_time  DateTime
  end_time    DateTime?
  video_url   String?
  teacher_id  String
  course_id   String
  course      courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  teacher     teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([course_id], map: "live_classes_course_id_fkey")
  @@index([teacher_id], map: "live_classes_teacher_id_fkey")
}

model certificates {
  id          String   @id @default(cuid())
  student_id  String
  course_id   String?
  course_name String
  issued_date DateTime @default(now())
  file_url    String?
  course      courses? @relation(fields: [course_id], references: [id], onDelete: Cascade)
  student     students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([course_id], map: "certificates_course_id_fkey")
  @@index([student_id], map: "certificates_student_id_fkey")
}

model blog_posts {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String
  cover_image_url String?
  author_id       String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  author          users    @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([author_id], map: "blog_posts_author_id_fkey")
}

model messages {
  id          String   @id @default(cuid())
  sender_id   String
  receiver_id String
  content     String
  sent_at     DateTime @default(now())
  read_status Boolean  @default(false)
  receiver    users    @relation("messages_received", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender      users    @relation("messages_sent", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([receiver_id], map: "messages_receiver_id_fkey")
  @@index([sender_id], map: "messages_sender_id_fkey")
}

model announcements {
  id         String   @id @default(cuid())
  title      String
  message    String
  posted_by  String
  created_at DateTime @default(now())
  postedBy   users    @relation("announcements_posted", fields: [posted_by], references: [id], onDelete: Cascade)

  @@index([posted_by], map: "announcements_posted_by_fkey")
}

model settings {
  id               String   @id @default(cuid())
  theme            String   @default("light")
  primary_color    String?
  maintenance_mode Boolean  @default(false)
  auto_backup      String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model notifications {
  id          String   @id @default(cuid())
  user_id     String
  type        String
  reciever_id String?
  sender_id   String?
  message     String
  is_read     Boolean  @default(false)
  created_at  DateTime @default(now())
  link        String?
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "notifications_user_id_fkey")
}

model password_resets {
  id         String   @id @default(cuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "password_resets_user_id_fkey")
}

enum UserStatus {
  active
  inactive
  banned
}

enum Role {
  admin
  teacher
  student
}
